<?xml version="1.0" encoding="utf-8"?>

<chapter id="jmx">
  
  <para>
    The main focus of Jolokia is to allow an easy access to JMX MBeans
    from everywhere. These MBean come from multiple origins. MBeans
    can be provided by the JVM itself, by an application server or an
    application itself. Each MBean is registered at a specific
    MBeanServer. In a single JVM can co-exist multiple
    MBeanServers. The so called
    <emphasis>Platform-MBeanServer</emphasis> is always present and
    is created by the JVM during startup. Especially application
    servers often create additional MBeanServers for various
    purposes. When accessing an MBean remotely via JSR-160, the
    MBeanServer holding the requested MBean must be known
    before. Jolokia instead <emphasis>merges</emphasis> all
    MBeanServers it can find to give a single view on all MBeans. The
    merging algorithm is described in <xref
    linkend="mbeanserver-merging"/>. 
  </para>
  <para>
    For application specific MBeans Jolokia provides an own, so called
    <emphasis>Jolokia MBeanServer</emphasis> which it treated
    specially by the Jolokia agents. The Jolokia MBeanServer is
    explained in <xref linkend="jolokia-mbeanserver"/>. 
  </para>
  <para>
    Creating and using application specific MBean is easy, especially if <ulink
    url="">Standard MBeans</ulink> are implemented. However, for
    Spring users there is even a easier, more <ulink
    url="">declarative way</ulink> for turning POJOs into MBeans. In
    addition Jolokia provides an easy, declarative way for firing up a
    Jolokia JVM agent merely by including some Jolokia specific Spring
    configuration. This is described in <xref linkend="jvm-spring"/>
  </para>

  <section id="jolokia-mbeanserver">
    <title>Jolokia MBeanServer</title>
    
    <para>
      The Jolokia MBeanServer can be easily created and used by an
      application using a locator:
    </para>
    <programlisting language="java"><![CDATA[
MBeanServer jolokiaServer = JolokiaMBeanServerUtil.getJolokiaMBeanServer();
]]></programlisting>
    <para>
      This server is treated specially by a Jolokia Agent:
    </para>
    <itemizedlist>    
      <listitem>
        Every MBean registered at the Jolokia MBeanServer will never
        show up remotely via JSR-160. The Jolokia MBeanServer is never
        exposed over JSR-160. 
      </listitem>
      <listitem>
        Each Jolokia MBeanServer registered MBean will shadow any
        MBean with the same ObjectName in any other MBeanServer
        present. See below for more details.
      </listitem>
      <listitem>
        The Jolokia MBeanServer is also responsible for managing so
        called <strong>JSON MBeans</strong>. This are MBeans
        annotated with <classname>@JsonMBean</classname> on the class
        level. JSON MBean are explained in <xref
        linkend="json-mbean"/> 
      </listitem>
    </itemizedlist>
    <section id="mbeanserver-merging">
      <title>MBeanServer merging</title>
      <para>
        Jolokia tries hard to detect as many MBeanServer available in
        a JVM. Beside the always present PlatformMBeanServer many
        application servers create own MBeanServer which not always
        can be found with standard mechanisms. Therefore Jolokia comes
        with so called <classname>ServerDetector</classname>s for many
        known brands of applications server. These server detectors
        know how to find MBeanServer by application server specific
        means. And finally there is optionally the Jolokia MBeanServer
        as described above.
      </para>
      <para>
        The set of available of MBeanServers is detected during
        runtime and kept, except for the Jolokia MBeanServer which can
        kick in and out at any time. For Jolokia operations, all these
        MBeanServers are tried according the order given below.
      </para>
      <itemizedlist>
        <listitem>
          The <strong>Jolokia MBeanServer</strong> is queried first,
          if available. 
        </listitem>
        <listitem>
          Next every MBeanServer as detected by the <strong>server
          detectors</strong> a queried.
        </listitem>
        <listitem>
          All MBeanServers returned by
          <code>MBeanServerFactory.findMBeanServer(null)</code> are
          called if not already tried previously.
        </listitem>
        <listitem>
          Finally, the
          <code>ManagementFactory.getPlatformMBeanServer()</code> is
          used (also, if not queried before).
        </listitem>
      </itemizedlist>
      
      <itemizedlist>
        <listitem>
          For <constant>READ</constant> and <constant>WRITE</constant>,
          each MBeanServer is tried with the given ObjectName and
          attribute. The first one holding the MBean
          <emphasis>and</emphasis> attribute will be called and the
          request returns. If the ObjectName matches but not the
          attribute, then the next MBeanServer is tried.
        </listitem>
        <listitem>
          For <constant>LIST</constant> and
          <constant>SEARCH</constant> requests, the information of all
          MBeanServers is merged together. Different MBeans registered
          at different MBean Server but with the same ObjectName will
          have their attributes and operations merged in the
          output. Except for every MBean found on the Jolokia
          MBeanServer. In this case the information only for this
          MBean is returned, effectively hiding every other
          attribute/operation in the output on any other MBeanServer.
        </listitem>
        <listitem>
          For <constant>READ</constant> requests using ObjectName
          patterns or provide multiple attributes only the first found
          MBean is used. The same is valid for
          <constant>EXEC</constant> requests.
        </listitem>
      </itemizedlist>
      <para>
        As it can seen from the list above, the merging algorithm is
        quite complicate for MBeans with the same name but located in
        different MBeanServers. This complexity is mainly due to the
        way how JSON MBeans work. It is recommended to avoid issues
        with this sort of "conflict" resolution by using orthogonal
        object names, i.e. to not use MBeans with the same name in
        different MBeanServers. 
      </para>
    </section>
  </section>
  
  <section id="json-mean">
    <title>@JsonMBean</title>
    
    <para>
      JMX 1.4 introduced <ulink url="">MXBeans</ulink> which allows
      for nearly arbitrary data to be translated into so called
      OpenType which are accessible via JMX. For example, arbitrary
      Java Beans are translated into a
      <classname>CompositeData</classname> structure with property
      names as keys and their values in CompositeData values. 
    </para>

    <para>
      The Jolokia MBeanServer and the
      <classname>@JsonMBean</classname> annotation is contained in the
      Maven module <constant>jolokia-jmx</constant>.
    </para>

    <para>
      Jolokia provides an annotation <classname>@JsonMBean</classname>
      for marking an MBean as a JSON MBean. Such an MBean, if
      registered at the Jolokia MBeanServer creates a proxy on the
      Platform MBeanServer where every complex value gets translated
      into plain strings in JSON format. This is true for attributes,
      operation return values and arguments.  
    </para>
  </section>

  <section id="jvm-spring">
    <title>Spring integration</title>
    <para>
      A Jolokia agent can be easily integrated into a Spring application
      context. A dedicated artefact
      <constant>jolokia-spring</constant> can be used, which
      comes with a custom Spring configuration syntax.
    </para>
    <para>
      For Maven based projects, a simple dependency declaration is
      sufficient:
    </para>
    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.jolokia</groupId>
  <artifactId>jolokia-spring</artifactId>
  <version>1.1.0</version>
</dependency>    
]]></programlisting>
    <para>
      With this in place, the following configuration can be used to
      fire up a Jolokia JVM based agent using the HTTP server which
      comes with OpenJDK/Oracle JVMs (Version 6 or later). 
    </para>
    <programlisting language="xml"><![CDATA[
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:jolokia="http://www.jolokia.org/jolokia-spring/schema/config"
        xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.jolokia.org/jolokia-spring/schema/config 
             http://www.jolokia.org/jolokia-spring/schema/config/jolokia-config.xsd
       ">

  <jolokia:server lookupConfig="false" systemPropertiesMode="never">
    <jolokia:config
            autoStart="true"
            host="0.0.0.0"
            port="8778"
            ....
            />
  </jolokia:server>
</beans>
]]></programlisting>
    <para>
      There are two directives available:
      <constant>&lt;jolokia:server&gt;</constant> declares a Jolokia
      server with a configuration as defined in an embedded
      <constant>&lt;jolokia:config&gt;</constant> configuration
      section.<sidebar>
      <title>IDE support</title>
      With a decent IDE like IntelliJ IDEA you get completion support
      on the configuration attributes so it can be easily determined
      which configuration options are available. Even better, there is also
      some documentation for each attribute (e.g. by using "Quick
      documentation" with ^Q in IDEA with).
    </sidebar>
    </para>
    <para>
      <constant>&lt;jolokia:server&gt;</constant> has an attribute
      <constant>lookupConfig</constant>. If set to
      <constant>true</constant>, externally defined 
      <constant>&lt;jolokia:config&gt;</constant> sections will be
      looked up, too and merged with the embedded configuration. A
      <constant>&lt;jolokia:config&gt;</constant> has an
      <constant>order</constant> attribute, which determines the
      config merge order: The higher order configs will be merged
      later and hence will override conflicting parameters. By
      default, external config lookup is disabled.
    </para>
    <para>
      The attribute <constant>systemPropertiesMode</constant>
      determines, how system properties with a  prefix
      <constant>jolokia.</constant> can be used as configuration
      values. There are three modes available:
    </para>
    <table id="jvm-spring-system-properties">
      <title>System properties modes</title>
      <thead>
        <tr>
          <td>Mode</td>
          <td>Description</td>
        </tr>
      </thead>
      <tr>
        <td><literal>never</literal></td>
        <td>
            No lookup is done on system properties as all. This is the
            default mode.
        </td>
      </tr>
      <tr>
        <td><literal>fallback</literal></td>
        <td>
          System properties with a prefix
          <constant>jolokia.</constant> are used as fallback
          configuration values if not specified locally in the
          Spring application
          context. E.g. <constant>jolokia.port=8888</constant> will
          change the port on which the agent is listening to 8888 if
          the port is not explicitily specified in the
          configuration. 
        </td>
      </tr>
      <tr>
        <td><literal>override</literal></td>
        <td>
          System properties with a prefix
          <constant>jolokia.</constant> are used as configuration
          values even if they are specified locally in the Spring
          application
          context. E.g. <constant>jolokia.port=8888</constant> will
          change the port on which the agent is listening to 8888 in
          any case. 
        </td>
      </tr>
    </table>
    <para>
      <constant>&lt;jolokia:config&gt;</constant> takes as attributes all
      the configuration parameters for the JVM agent as described in
      <xref linkend="agent-jvm-config"/>. In addition, the is an extra
      attribute <constant>autoStart</constant> which allows for
      automatically starting the HTTP server during the initialization
      of the application context. By default this is set to
      <constant>false</constant>, so the server needs to be started
      manually. 
    </para>
  </section>
  
  <section id="jvm-spring-plugin">
      <title>Jolokia Spring plugin</title>
      <para>
        There is an even simpler way to startup a Jolokia JVM agent
        with a default setup if you use a variant of the
        <constant>jolokia-spring</constant> module with the classifier
        <constant>plugin</constant>. This artefact contains a
        predefined Spring configuration for starting up Jolokia with
        default values automatically:
      </para>
      <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>org.jolokia</groupId>
  <artifactId>jolokia-spring</artifactId>
  <classifier>plugin</classifier>
  <version>1.0.7</version>
</dependency>    
]]></programlisting>
      <para>
        Beside putting this jar into the classpath (along with its
        dependencies) the only requirement is, that the Spring
        application context needs to pickup
        <filename>classpath:META-INF/spring/jolokia.xml</filename>. Luckily,
        many Spring based containers like the <ulink
        url="http://camel.apache.org/camel-maven-plugin.html">Camel
        Maven Plugin</ulink> do this automatically for you, nothing
        has to be configured here. Otherwise this
        application context path has to be added manually, but in this case it is
        probably easier to use the non-plugin version (without
        classifier) and declare the Jolokia server explicitily in an
        existing Spring configuration file as described above.
      </para>
      <para>
        By default, the Jolokia agent starts on port 8778 on every
        IP-Address of the host <emphasis>without</emphasis>
        security.
      </para>
      <para>
        The configuration can be tweaked via system properties as
        described in <xref
        linkend="jvm-spring-system-properties"/>. I.e. the plugin
        doesn't specify any configuration on its own and uses a
        <constant>systemPropertiesMode</constant> of
        "<constant>fallback</constant>". 
      </para>
      <para> 
        As an alternative, the default settings can be customized by
        providing a standalone
        <constant>&lt;jolokia:config&gt;</constant> somewhere in the
        Spring application context. An <constant>order</constant>
        attribute can be used if multiple config declarations are
        present: the higher the order, the higher the priority. But
        then again, instead of using the plugin with an external
        configuration it is probably better to us an explicite
        <constant>&lt;jolokia:server&gt;</constant> declaration, since
        you have to add to a Spring configuration file anyway. 
      </para>
    </section>

</chapter>