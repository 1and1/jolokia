<?xml version="1.0" encoding="UTF-8"?>
<chapter id="introduction">
  <title>Introduction</title>
  <para>
    JMX (Java Management Extensions) is <emphasis
    role="bold">the</emphasis> standard management solution in the
    Java world. Since JDK 1.5 it is available in every Java Virtual
    Machine and especially JEE application servers use this technology
    intensively for exposing managable entities.
  </para>
  <para>
    We love JMX. It is a well crafted specification, created in times
    where other concepts like EJBs failed spectacularly. Even more
    than ten years after its incubation it is still the one-and-only
    when it comes to management in the Java world. What we like
    especially are the various levels of sophistications for
    implementing MBeans, starting with dead simple <emphasis>Standard
    MBeans</emphasis> and ending in very flexible Open MBeans.
  </para>
  <para>
    Some of advanced JMX concepts didn't really hit the public and are
    now probably obsolete. Add-on standards like JSR-77 didn't
    received the adoption level they deserved. And then there is
    JSR-160, JMX remoting. This specificatiion is designed for ease of
    usage and has the ambition to transparently hide the technical
    details for remote communication so that is makes (nearly) no
    difference, whether MBeans are invoked locally or
    remotely. Unfortunately, the underlying transport protocol (RMI)
    and programing model is very Java centric and is not usable
    outside the Java world.
  </para>  
  <para>
    This is where Jolokia comes into play. It is agent based approach,
    living side by side with JSR-160, but uses the much more open HTTP
    for its transport business where the data payload is serialized in
    JSON. This opens a whole new world for different, non-Java
    clients. Beside this protocol switch, Jolokia provides new
    features for JMX remoting, which are not available for JSR-160
    connectors: Bulk requests allow for multiple JMX operations with a
    single remote server roundtrip. A fine grained security mechanism
    can restrict the JMX access on specific JMX operations. Other
    features like the JSR-160 proxy mode or history tracking are
    specific to Jolokia, too. 
  </para>
  <para>
    This reference manual explains all Jolokia details. After giving
    an overview over Jolokia's architecture (<xref
    linkend="architecture"/>), installation and configuration of the
    various Jolokia agents is described (<xref
    linkend="agents"/>). Jolokia's security policy mechanism
    (<xref linkend="security"/>) and proxy mode (<xref
    linkend="proxy"/>) are the topic of the following
    chapters. For implementors of Jolokia client bindings the protocol
    definition is probably the most interesting (<xref
    linkend="protocol"/>). Jolokia itself comes with some preregister
    MBeans which are listed in an extra chapter (<xref
    linkend="mbeans"/>). Finally, the already available clients
    bindings are described (<xref linkend="clients"/>).
  </para>
  <note>
    <para>
      This reference manual is a work in progress. In fact, most of the
      chapters are still to be filled in. The most complete chapter is
      on the <link linkend="protocol">protocol</link>, so you can
      already start to play around implementing own client
      bindings. We are really keen on hearing your success stories and
      are very open to integrate JVM based binding within Jolokia itself.
    </para>
    <para>
      Please stay tuned, we are really work hard on it ;-)
    </para>
  </note>
</chapter>