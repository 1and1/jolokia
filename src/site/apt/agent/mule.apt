Mule Agent

  Jolokia has also a {{{http://www.mulesoft.org}Mule ESB}} agent which can be
  deployed on the Mule ESB (running in standalone mode). 

* Installation

  The agent jar needs to be stored within the Mule installation in
  <<<lib/opt/>>>. Additionally, the Mule configuration needs to be
  adapted to contain the following section:

------
 <management:custom-agent name="jolokia-agent" class="org.jolokia.mule.J4pAgent">
   <spring:property name="port" value="8899"/>
 </management:custom-agent>
 <management:jmx-server/>
------

  Starting up mule should yield a startup message like 

---------
 *********************************************************
 * Mule ESB and Integration Platform                     *
 * Version: 2.2.1 Build: 14422                           *
 * MuleSource, Inc.                                      *
 * For more information go to http://mule.mulesource.org *
 *                                                       *
 * Server started: 12/9/09 3:36 PM                       *
 * Server ID: myMule                                     *
 * JDK: 1.6.0_15 (mixed mode)                            *
 * OS encoding: MacRoman, Mule encoding: UTF-8           *
 * OS: Mac OS X (10.6.2, x86_64)                         *
 * Host: localhost (127.0.0.1)                           * 
 *                                                       *
 * Agents Running:                                       *
 *   Wrapper Manager: Mule PID #0, Wrapper PID #861      *
 *   Jolokia Agent: http://localhost:8899/jolokia        *
 *   JMX Agent                                           *
 *********************************************************
----------

  Note the URL for the Jolokia agent which can be used by a client like <<jmx4perl>>, 
  <<check_jmx4perl>> or <<j4psh>> like

---------
 jmx4perl http://localhost:8899/jolokia list
---------

  which will result in an output similar to

---------
 Mule.myMule:
    Mule.myMule:name=AllStatistics,type=org.mule.Statistics
        Attributes:
            Enabled                             boolean
        Operations:
            void logSummary()                   
            java.lang.String printXmlSummary()  
            java.lang.String printHtmlSummary() 
            void clear()                        
            java.lang.String printCSVSummary()  
 
 ....
 java.lang:
    java.lang:type=Memory
        Attributes:
            NonHeapMemoryUsage                  CompositeData [ro] 
            ObjectPendingFinalizationCount      int [ro]
            Verbose                             boolean
            HeapMemoryUsage                     CompositeData [ro]
        Operations:
            void gc()
----------

 Note that Mule was started here with a server id myMule (startup
 option: <<<-M-Dmule.serverId=myMule>>>). As you can see you have
 access to the Mule specific MBeans and the Java platform MXBeans
 (which BTW is not easy achievable using Mules JSR-160 agents
 directly).

 For enabling basic security the properties user and password can be set:

-----------
 <management:custom-agent name="j4p-agent" class="org.jmx4perl.mule.J4pAgent">
   <spring:property name="user" value="roland"/>
   <spring:property name="password" value="wtf"/>
 </management:custom-agent>
 <management:jmx-server/>
-----------

 On the client side the options <<<--user>>> and <<<--password>>> can be
 used with <<<jmx4perl>>> and <<<check_jmx4perl>>> for specifying the
 credentials.

 Finally, all other options as specified as init parameters in
 <<<jolokia.war>>>s web.xml can be used as properties here as well.
