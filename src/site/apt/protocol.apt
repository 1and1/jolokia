 Jolokia uses JSON over HTTP for its communication. This document
 specifies the format of the JSON requests and responses exchanged
 between an Jolokia agent and its clients. The communication is based
 on HTTP as the transport protocol and hence follows a request-response
 paradigm. 

 Requests can be sent in two ways: Either as a HTTP GET request, in
 which case the request parameters are encoded in the URL. Or as a
 POST request where the request is extracted from a JSON payload.
 The former is suitable for simple request (and for testing the agent
 via a browser) whereas POST requests are more appropriate for complex
 requests. E.g. bulk requests are only possible with POST. (Keep in mind
 that many web servers log the requested path of every request, including
 parameters passed to a GET request, so posting messages over GET
 often bloats server logs.)

 The response returned by the agent uses JSON for the data
 representation. 

Version

 This document describes Version 4 of the j4p agent protocol. 

Request

  Jolokia knows about two different styles for handling requests, which
  are distinguished by the HTTP method used, GET or POST.

  For GET requests it uses restful style, which essentially is a
  single URL which encodes all requests parameters. For this to work,
  the URL is divided into parts separated by <<</>>>. In general, the
  request URL looks like

------
 <base-url>/<mode of operation>/<operation specific parameter>/..../
------

  The <\<base-url\>> specifies the URL under which the j4p
  agent is accessible in general. It typically looks like
  <<<http://localhost:8080/jolokia>>>, but depends obviously on your
  deployment setup. Normally, the last part of this URL is the name of
  the deployed agent, which by default is based on the
  filename (e.g. <<<jolokia.war>>>).  <\<mode of operation\>> specifies
  one of the supported operations after which operation-specific
  parameters follow.

  In addition to the command provided as a path, the agent knows about
  some query parameters which influence the value returned. These are
  described in section {{{queryparams}Query Parameters}}

  For POST the complete request is specified in the POST content. This
  content is a JSON representation of the JMX request. Beside the
  operations available for a simple GET request, POST requests can
  contain additional parameters, e.g. for specifying a
  proxy. Additionally, with POST request you can submit multiple JMX
  request at a time to process bulk operations and minimizing turnaround
  times.

  The supported operations are described now in the following
  sections.

* GET Requests

  GET requests are simple in usage, can be tested from within the
  browser, but lack some advanced features only available for POST
  requests. The encoded parameters are normally logged in the
  access log of the web server, so sending anything but the most
  trivial requests this way may put an unnecessary burden on the web
  server (as well as making the logs more difficult to sort through).

** read

  Mode used for reading an JMX attributes. The operation specific
  parameters have the following format.

-------
  <mbean name>/<attribute name>/<inner path>
-------

*** Mbean name (mandatory)

  The canonical name of the MBean for which the attribute should be
  fetched. Please refer to the JMX documentation for the definition of
  a <<canonical name>>. In short, it contains two parts: A domain part
  and a list of properties which are separated by <<<:>>>. Properties
  themselves are combines in a comma separated list of key-value
  pairs.

  Example:

-------
 java.lang:type=Memory
 java.lang:name=Code Cache,type=MemoryPool
-------

*** Attribute name (mandatory)

  This is the name of the attribute which is requested. 

  Example:

--------
 HeapMemoryUsage
 SystemProperties
--------

*** Inner path (optional)

  This is an optional part which specifies an inner path within the
  attribute's type. j4p agent knows how to serialize certain complex
  data types with JSON, i.e. collections and <<<CompoundData>>>. Please
  refer to the next section for more details about JSON
  serialization. An <inner path> can be used to specify a certain
  substructure (plain value, array, hash) within the returned complex
  attribute value. Think of it as something like "XPath lite". This is
  best explained by an example:

  The attribute <<<HeapMemoryUsage>>> of the MBean
  <<<java.lang:type=Memory>>> can be requested with the URL

---------
  http://localhost:8080/j4p/read/java.lang:type=Memory/HeapMemoryUsage
---------

  which returns a complex JSON structure like

---------
 {
   "committed" : 18292736,
   "used" : 15348352,
   "max" : 532742144,
   "init" : 0
 }
---------

  In order to get to the value for used heap memory you should specify an inner
  path <<<used>>>, so that the request 

---------
 http://localhost:8080/j4p/read/java.lang:type=Memory/HeapMemoryUsage/used
---------

  results in a response of
  
---------
 15348352
---------

  If the attribute contains arrays at some level, use a numeric index as part of
  the innerpath if you want to transverse into this array. 


....

  <The rest of the protocol specification has still to be transformed
  from the jmx4perl source. Please stay tuned> 