<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>Features</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <!-- The body of the document contains a number of sections -->
    <div class="feature grid_18 alpha">
      <div class="grid_7 prefix_1 alpha">
        <div class="feature_box">
          <h2>Bulk-Requests</h2>
          <div class="feature_icon"></div>
          <p>
            In contrast to JSR-160 remoting, Jolokia can process many
            JMX requests with a single roundtrip. A single HTTP POST
            request puts those requests in its JSON payload
            which gets dispatched on the agent side. These bulk
            requests can increase performance drastically for
            monitoring solutions. The Nagios plugin
            <code>check_jmx4perl</code> uses bulk requests for its
            multi check feature. <a href="">More ...</a>
          </p>
        </div>
        <div class="feature_box">
          <h2>Security</h2>
          <div class="feature_icon"></div>
          <p>
            In addition to standard HTTP security (SSL,
            HTTP-Authentication) Jolokia supports a custom policy with
            fine grained restrictions based on multiple properties
            like the client's IP address or subnet, the MBean names
            and their attributes and operations. The policy is defined
            in an XML format with support for allow/deny sections and
            wildcards. <a href="">More ...</a>
          </p>
        </div>
        <div class="feature_box">
          <h2>Simple</h2>
          <div class="feature_icon"></div>
          <p>
            It's simple. Jolokia can be used with a simple Web
            browser since it supports both, GET and POST requests. A
            custom, simple, REST-like URL encoding enables simple
            access from any client platform. The <a href="">Java</a>
            and <a href="">Perl</a> client libraries' API is designed
            for a simple usage, using a request-response
            paradigma. They are not harder to use as any other HTTP
            library. <a href="">More ...</a>
          </p>
        </div>
      </div>
      <div class="grid_7 prefix_1 omega">
        <div class="feature_box">
          <h2>Proxy-Mode</h2>
          <div class="feature_icon"></div>
          <p>
            Jolokia can operate in an agentless mode
            where the only requirement on the target platform is the
            standard JSR-160 export of its MBeanServer. A proxy
            listens on the front side for Jolokia requests via
            JSON/HTTP and propagates these to the target server
            through remote JSR-160 JMX calls. Bulk requests gets
            dispatched into multiple JSR-160 requests on the proxy
            transparently. <a href="">More ...</a>
          </p>
        </div>
        <div class="feature_box">
          <h2>Fast</h2>
          <div class="feature_icon"></div>
          <p>
            Jolokia uses the super fast JSON serialization library <a
            href="">json-simple</a> for parsing requests and creating
            responses. Due to its typeless nature, it's faster than
            Java object serialization used in JSR-160 communication.
            The JSON payload is in general much smaller than its
            correspondent serialized Java object representation. Bulk
            request (which are not available for JSR-160 remoting) can
            boost performance even further. <a href="">More ...</a>
          </p>
        </div>
        <div class="feature_box">
          <h2>Firewall friendly</h2>
          <div class="feature_icon"></div>
          <p>
            The usage of HTTP as transport protocol makes Jolokia a
            perfect choice for firewall setups. It can seemless
            operate over multiple HTTP-Proxy hops. <a href="">More ...</a>
          </p>
        </div>
        <div class="feature_box">
          <h2>Polyglot</h2>
          <div class="feature_icon"></div>
          <p>
            Thanks to choosing the widely adopted
            standards HTTP and JSON, Jolokia is able to bridge
            effortless the Java centric technology JMX to non-Java
            platforms. <a href="">Java</a> and <a href="">Perl</a>
            client libraries are already available, other laguage
            bindings are in the pipeline (e.g. Javascript). <a
            href="">More ...</a>
          </p>
        </div>
      </div>
    </div>
  </body>    
</document>

